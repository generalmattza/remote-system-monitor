# # Install MQTT Datasource Plugin for Grafana
# FROM node:20-alpine AS builder_mqtt

# RUN apk add --no-cache git go
# # RUN npm install -g yarn
# RUN go install github.com/magefile/mage@latest
# ENV PATH="/root/go/bin:${PATH}"

# WORKDIR /tmp
# # Build the MQTT datasource plugin
# RUN git clone https://github.com/grafana/mqtt-datasource.git && \
#     cd mqtt-datasource && \
#     yarn install && \
#     yarn build && \
#     mage build:backend

# Stage 1: Build the plugin with Node.js and Go
FROM golang:1.20-alpine AS builder

# Install git, build tools, and Node.js 16
RUN apk add --no-cache git gcc musl-dev && \
    apk add --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/v3.15/main nodejs=16.20.2-r0 npm=8.1.3-r0 && \
    go install github.com/magefile/mage@latest

# Set working directory
WORKDIR /tmp

# Clone and build the golioth-websocket-plugin
RUN git clone https://github.com/golioth/grafana-websocket-plugin.git && \
    cd grafana-websocket-plugin && \
    GOOS=linux GOARCH=amd64 GOFLAGS=-buildvcs=false mage build:linux

# Stage 2: Create the final Grafana image
FROM grafana/grafana:11.6.0

# Switch to root to modify configuration and copy files
USER root

# Create plugin directory and copy the built plugin
RUN mkdir -p /var/lib/grafana/plugins/golioth-websocket-datasource
COPY --from=builder /tmp/grafana-websocket-plugin/dist/ /var/lib/grafana/plugins/golioth-websocket-datasource/

# Copy provisioning and dashboard files
COPY ./provisioning /etc/grafana/provisioning
COPY ./dashboards /etc/grafana/dashboards

# Configure Grafana to allow the unsigned plugin
RUN echo "[plugins]" >> /etc/grafana/grafana.ini && \
    echo "allow_loading_unsigned_plugins = golioth-websocket-datasource" >> /etc/grafana/grafana.ini

# Ensure correct permissions
RUN chown -R grafana:root /var/lib/grafana/plugins/golioth-websocket-datasource && \
    chmod -R 755 /var/lib/grafana/plugins/golioth-websocket-datasource

# Switch back to the grafana user
USER grafana